class Board{

	def printBoard(board: Array[String]): Unit = {
	    println("Current Board:      		Board Positions:")
	    println("   |   |             		   |   |        ")
	    println(" " + board(0) + " | " + board(1) + " | " + board(2) + "           		 1 | 2 | 3      ")
	    println("___|___|___          		___|___|___     ")
	    println("   |   |             		   |   |        ")
	    println(" " + board(3) + " | " + board(4) + " | " + board(5) + "           		 4 | 5 | 6      ")
	    println("___|___|___          		___|___|___     ")
	    println("   |   |             		   |   |        ")
	    println(" " + board(6) + " | " + board(7) + " | " + board(8) + "           		 7 | 8 | 9      ")
	    println("   |   |             		   |   |        ")
	}

  	def changeCurrentPlayer(currentPlayer: (String, String)): (String, String) = {
 		var newPlayer = if(currentPlayer._1 == "X") {("O", "Player 2")} else {("X", "Player 1")}
		return newPlayer
	}

	def makePlay(board: Array[String], space: Int, currentPlayer: (String, String)): Array[String] = {
		board(space - 1) = currentPlayer._1
		return board
	}

	def requestSpace(board: Array[String]): Int = {
		println("Enter space to play")
		var space: Int = readInt
		while(validSpace(board: Array[String], space: Int) == false){
			println("Space not valid. Please enter an empty space to play")
			space = readInt
		}
		return space
	}

	def validSpace(board: Array[String], space: Int): Boolean = {
		(space > 0) && (space < 10) && (board(space - 1) == " ")
	}

	def draw(board: Array[String]) : Boolean = {
      (board.count(_ == " ") == 0)
    }

	def pWinningLines(board: Array[String]) : Array[Array[String]] = {
		var potentialWinningLines: Array[Array[String]] = (
				Array(Array(board(0),board(1),board(2)), 
				Array(board(3),board(4),board(5)),
				Array(board(6),board(7),board(8)),
				Array(board(0),board(3),board(6)),
				Array(board(1),board(4),board(7)),
				Array(board(2),board(5),board(8)),
				Array(board(0),board(4),board(8)),
				Array(board(2),board(4),board(6)))
				) 
		potentialWinningLines
	}

	def win(board: Array[String]) : Boolean = {
		(pWinningLines(board).map { line =>
      		(winner(line))
        	}) contains (true)
	}

	def winner(line: Array[String]) : Boolean = {
      (!line(0).equals(" ") && line(0).equals(line(1)) && line(1).equals(line(2)))
    }

    def start() :Boolean = {
    	val name = (readLine("Would you like to play Tic Tac Toe? (Y or N)")).toUpperCase
    	((name) contains ("Y"))
    }

    def playGame(board: Array[String], player: (String, String)): (String, String) = {
    	def loop(currentPlayer: (String, String)): (String, String) = 
		if (draw(board) == true || win(board) == true) return changeCurrentPlayer(currentPlayer) 
		else {
			println(currentPlayer._2 + " (" + currentPlayer._1 + ") to go next")
			printBoard(makePlay(board, requestSpace(board), currentPlayer))
			loop(changeCurrentPlayer(currentPlayer))
		}
		loop(player)
	}

    def endGame(board: Array[String], lastPlayer: (String, String)) = {
    	printBoard(board)
		if(win(board) == true){println(lastPlayer._2 + " (" + lastPlayer._1 + ") wins!")}
		else{println("game is a draw")}
    }

    def newBoard(): Array[String] = {
    	return Array(" ", " ", " ", " ", " ", " ", " ", " ", " ")
    } 

    def playerToStart(): (String, String) = {
    	if(coinFlip == 0) {val firstPlayer = ("X", "Player 1")
    		return firstPlayer}
    	else {val firstPlayer = ("O", "Player 2")
    		return firstPlayer}
    }

    def coinFlip(): Int = {
    	val random: Int = ((System.currentTimeMillis())%2).toInt
    	return random
    }

	def main = {
		while(start == true){
			val board = newBoard
			val firstPlayer = playerToStart
			printBoard(board)
			val lastPlayer = playGame(board, firstPlayer)
			endGame(board, lastPlayer)
		}
		println("Goodbye!")
	}
}

val board = new Board
board.main
