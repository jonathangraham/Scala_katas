class Board{
  	var board = Array(" ", " ", " ", " ", " ", " ", " ", " ", " ")
  	var currentPlayer = "X"
  	var space = 11

	def printBoard(board: Array[String]): Unit = {
	    println("Current Board:      		Board Positions:")
	    println("   |   |             		   |   |        ")
	    println(" " + board(0) + " | " + board(1) + " | " + board(2) + "           		 1 | 2 | 3      ")
	    println("___|___|___          		___|___|___     ")
	    println("   |   |             		   |   |        ")
	    println(" " + board(3) + " | " + board(4) + " | " + board(5) + "           		 4 | 5 | 6      ")
	    println("___|___|___          		___|___|___     ")
	    println("   |   |             		   |   |        ")
	    println(" " + board(6) + " | " + board(7) + " | " + board(8) + "           		 7 | 8 | 9      ")
	    println("   |   |             		   |   |        ")
	}

  	def changeCurrentPlayer = {
 		if(currentPlayer == "X") { currentPlayer = "O"} else { currentPlayer = "X"}
	}

	def getInput(space: Int): Unit = {
		board(space - 1) = currentPlayer
	}

	def requestSpace(): Unit = {
		println("Enter space to play")
		space = readInt
		while(validSpace == false){
			println("Space not valid. Please enter an empty space to play")
			space = readInt
		}
	}

	def validSpace(): Boolean = {
		(space > 0) && (space < 10) && (board(space - 1) == " ")
	}

	def draw() : Boolean = {
      (board.count(_ == " ") == 0)
    }

	def pWinningLines() : Array[Array[String]] = {
		var potentialWinningLines: Array[Array[String]] = (
				Array(Array(board(0),board(1),board(2)), 
				Array(board(3),board(4),board(5)),
				Array(board(6),board(7),board(8)),
				Array(board(0),board(3),board(6)),
				Array(board(1),board(4),board(7)),
				Array(board(2),board(5),board(8)),
				Array(board(0),board(4),board(8)),
				Array(board(2),board(4),board(6)))
				) 
		potentialWinningLines
	}

	def win() : Boolean = {
		(pWinningLines.map { line =>
      		(winner(line))
        	}) contains (true)
	}

	def winner(line: Array[String]) : Boolean = {
      (!line(0).equals(" ") && line(0).equals(line(1)) && line(1).equals(line(2)))
    }

    def start() :Boolean = {
    	val name = (readLine("Would you like to play Tic Tac Toe? (Y or N)")).toUpperCase
    	((name) contains ("Y"))
    }

	def main = {
		while(start == true){
			while(draw == false && win == false){
				changeCurrentPlayer
				printBoard(board)
				println(currentPlayer + " to go next")
				requestSpace
				getInput(space)
			}
			printBoard(board)
			if(win == true){println(currentPlayer + " wins!")}
			else{println("game is a draw")}
			board = Array(" ", " ", " ", " ", " ", " ", " ", " ", " ")
		}
		println("Goodbye!")
	}
}


val board = new Board
board.main
